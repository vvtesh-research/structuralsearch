pTheta = dbeta( Theta , a , b )
layout( matrix( c( 1,2,3 ) ,nrow=3 ,ncol=1 ,byrow=FALSE ) ) # 3x1 panels
par( mar=c(3,3,1,0) , mgp=c(2,1,0) , mai=c(0.5,0.5,0.3,0.1) ) # margin specs
# Plot the prior.
plot( Theta , pTheta , type="l" , lwd=3 ,
xlim=c(0,1) , ylim=c(0,2) , cex.axis=1.2 ,
xlab=bquote(theta) , ylab=bquote(p(theta)) , cex.lab=1.5 ,
main="Prior" , cex.main=1.5 , col="skyblue" )
binwidth = 0.005
N = 5
z = 3
Theta = seq( from = binwidth/2 , to = 1-(binwidth/2) , by = binwidth )
pDataGivenTheta = Theta^z * (1-Theta)^(N-z)
# Compute the posterior at each value of theta.
plot( Theta , pDataGivenTheta , type="l" , lwd=3 ,
xlim=c(0,1) , cex.axis=1.2 , xlab=bquote(theta) ,
ylim=c(0,1.1*max(pDataGivenTheta)) ,
ylab=bquote( "p(D|" * theta * ")" ) ,
cex.lab=1.5 , main="Likelihood" , cex.main=1.5 , col="skyblue" )
if ( z > .5*N ) { textx = 0 ; textadj = c(0,1) }
else { textx = 1 ; textadj = c(1,1) }
text( textx , 1.0*max(pDataGivenTheta) , cex=2.0 ,
bquote( "Data: z=" * .(z) * ",N=" * .(N) ) ,adj=textadj )
binwidth=0.005
a=1
b=1
Theta = seq( from = binwidth/2 , to = 1-(binwidth/2) , by = binwidth )
# Compute the prior at each value of theta.
pTheta = dbeta( Theta , a , b )
layout( matrix( c( 1,2,3 ) ,nrow=2 ,ncol=1 ,byrow=FALSE ) ) # 3x1 panels
par( mar=c(3,3,1,0) , mgp=c(2,1,0) , mai=c(0.5,0.5,0.3,0.1) ) # margin specs
# Plot the prior.
plot( Theta , pTheta , type="l" , lwd=3 ,
xlim=c(0,1) , ylim=c(0,2) , cex.axis=1.2 ,
xlab=bquote(theta) , ylab=bquote(p(theta)) , cex.lab=1.5 ,
main="Prior" , cex.main=1.5 , col="skyblue" )
binwidth = 0.005
N = 5
z = 3
Theta = seq( from = binwidth/2 , to = 1-(binwidth/2) , by = binwidth )
pDataGivenTheta = Theta^z * (1-Theta)^(N-z)
# Compute the posterior at each value of theta.
plot( Theta , pDataGivenTheta , type="l" , lwd=3 ,
xlim=c(0,1) , cex.axis=1.2 , xlab=bquote(theta) ,
ylim=c(0,1.1*max(pDataGivenTheta)) ,
ylab=bquote( "p(D|" * theta * ")" ) ,
cex.lab=1.5 , main="Likelihood" , cex.main=1.5 , col="skyblue" )
if ( z > .5*N ) { textx = 0 ; textadj = c(0,1) }
else { textx = 1 ; textadj = c(1,1) }
text( textx , 1.0*max(pDataGivenTheta) , cex=2.0 ,
bquote( "Data: z=" * .(z) * ",N=" * .(N) ) ,adj=textadj )
binwidth=0.005
a=1
b=1
Theta = seq( from = binwidth/2 , to = 1-(binwidth/2) , by = binwidth )
# Compute the prior at each value of theta.
pTheta = dbeta( Theta , a , b )
layout( matrix( c( 1,2,3 ) ,nrow=3 ,ncol=1 ,byrow=FALSE ) ) # 3x1 panels
par( mar=c(3,3,1,0) , mgp=c(2,1,0) , mai=c(0.5,0.5,0.3,0.1) ) # margin specs
# Plot the prior.
plot( Theta , pTheta , type="l" , lwd=3 ,
xlim=c(0,1) , ylim=c(0,2) , cex.axis=1.2 ,
xlab=bquote(theta) , ylab=bquote(p(theta)) , cex.lab=1.5 ,
main="Prior" , cex.main=1.5 , col="skyblue" )
binwidth = 0.005
N = 5
z = 3
Theta = seq( from = binwidth/2 , to = 1-(binwidth/2) , by = binwidth )
pDataGivenTheta = Theta^z * (1-Theta)^(N-z)
# Compute the posterior at each value of theta.
plot( Theta , pDataGivenTheta , type="l" , lwd=3 ,
xlim=c(0,1) , cex.axis=1.2 , xlab=bquote(theta) ,
ylim=c(0,1.1*max(pDataGivenTheta)) ,
ylab=bquote( "p(D|" * theta * ")" ) ,
cex.lab=1.5 , main="Likelihood" , cex.main=1.5 , col="skyblue" )
if ( z > .5*N ) { textx = 0 ; textadj = c(0,1) }
else { textx = 1 ; textadj = c(1,1) }
text( textx , 1.0*max(pDataGivenTheta) , cex=2.0 ,
bquote( "Data: z=" * .(z) * ",N=" * .(N) ) ,adj=textadj )
postShape = BernBeta( priorShape=c(1,1) , dataVec=c(1,0,0,1,1) )
BernBeta = function( priorShape , dataVec , credMass=0.95 , saveGr=FALSE ) {
# Rename the prior shape parameters, for convenience:
a = priorShape[1]
b = priorShape[2]
# Create summary values of the data:
z = sum( dataVec == 1 ) # number of 1's in dataVec
N = length( dataVec )   # number of flips in dataVec
# Compute the posterior shape parameters:
postShape = c( a+z , b+N-z )
# Compute the evidence, p(D):
pData = beta( z+a , N-z+b ) / beta( a , b )
binwidth = 0.005 # Arbitrary small value for comb on Theta.
Theta = seq( from = binwidth/2 , to = 1-(binwidth/2) , by = binwidth )
# Compute the prior at each value of theta.
pTheta = dbeta( Theta , a , b )
# Compute the likelihood of the data at each value of theta.
pDataGivenTheta = Theta^z * (1-Theta)^(N-z)
# Compute the posterior at each value of theta.
pThetaGivenData = dbeta( Theta , a+z , b+N-z )
# Open a window with three panels.
layout( matrix( c( 1,2,3 ) ,nrow=3 ,ncol=1 ,byrow=FALSE ) ) # 3x1 panels
par( mar=c(3,3,1,0) , mgp=c(2,1,0) , mai=c(0.5,0.5,0.3,0.1) ) # margin specs
maxY = max( c(pTheta,pThetaGivenData) ) # max y for plotting
# Plot the prior.
plot( Theta , pTheta , type="l" , lwd=3 ,
xlim=c(0,1) , ylim=c(0,maxY) , cex.axis=1.2 ,
xlab=bquote(theta) , ylab=bquote(p(theta)) , cex.lab=1.5 ,
main="Prior" , cex.main=1.5 , col="skyblue" )
if ( a > b ) { textx = 0 ; textadj = c(0,1) }
else { textx = 1 ; textadj = c(1,1) }
text( textx , 1.0*max(pThetaGivenData) ,
bquote( "beta(" * theta * "|" * .(a) * "," * .(b) * ")"  ) ,
cex=2.0 ,adj=textadj )
# Plot the likelihood: p(data|theta)
plot( Theta , pDataGivenTheta , type="l" , lwd=3 ,
xlim=c(0,1) , cex.axis=1.2 , xlab=bquote(theta) ,
ylim=c(0,1.1*max(pDataGivenTheta)) ,
ylab=bquote( "p(D|" * theta * ")" ) ,
cex.lab=1.5 , main="Likelihood" , cex.main=1.5 , col="skyblue" )
if ( z > .5*N ) { textx = 0 ; textadj = c(0,1) }
else { textx = 1 ; textadj = c(1,1) }
text( textx , 1.0*max(pDataGivenTheta) , cex=2.0 ,
bquote( "Data: z=" * .(z) * ",N=" * .(N) ) ,adj=textadj )
# Plot the posterior.
plot( Theta , pThetaGivenData  ,type="l" , lwd=3 ,
xlim=c(0,1) , ylim=c(0,maxY) , cex.axis=1.2 ,
xlab=bquote(theta) , ylab=bquote( "p(" * theta * "|D)" ) ,
cex.lab=1.5 , main="Posterior" , cex.main=1.5 , col="skyblue" )
if ( a+z > b+N-z ) { textx = 0 ; textadj = c(0,1) }
else { textx = 1 ; textadj = c(1,1) }
text( textx , 1.00*max(pThetaGivenData) , cex=2.0 ,
bquote( "beta(" * theta * "|" * .(a+z) * "," * .(b+N-z) * ")"  ) ,
adj=textadj )
text( textx , 0.75*max(pThetaGivenData) , cex=2.0 ,
bquote( "p(D)=" * .(signif(pData,3)) ) , adj=textadj )
return( postShape )
} # end of function
weatherTn = as.matrix(c(0.9,0.5))
weatherTn = t(weatherTn)
weatherTn = rbind(weatherTn,1-weatherTn[1,])
weatherTn #This is our Weather trans matrix
presentWeather=as.matrix(c(1,0)) #Today is sunny.
for(i in 1:10) {
presentWeather = weatherTn %*% presentWeather
}
presentWeather #Stable Distribution
rand('seed',12345)
% DEGREES OF FREEDOM
dF = 10;
x = -3:.1:3;
Cx = cdf('t',x,dF)
z = rand;
% COMPARE VALUES OF
zIdx = min(find(Cx>z));
% DRAW SAMPLE
sample = x(zIdx);
% DISPLAY
figure; hold on
plot(x,Cx,'k','Linewidth',2);
plot([x(1),x(zIdx)],[Cx(zIdx),Cx(zIdx)],'r','LineWidth',2);
plot([x(zIdx),x(zIdx)],[Cx(zIdx),0],'b','LineWidth',2);
plot(x(zIdx),z,'ko','LineWidth',2);
text(x(1)+.1,z + .05,'z','Color','r')
text(x(zIdx)+.05,.05,'x_{sampled}','Color','b')
ylabel('C(x)')
xlabel('x')
hold off
rand('seed',12345)
nsamples <- 1000;
x <- runif(nsamples);
f <- function(x, u) {
return(3/2*(x-x^3/3) - u);
}
z <- c();
for (i in 1:nsamples) {
# find the root within (0,1)
r <- uniroot(f, c(0,1), tol = 0.0001, u = x[i])$root;
z <- c(z, r);
}
plot(z)
plot(r,z)
n <- 1000
u <- runif(n)
x <- u^(1/3)
hist(x, prob = TRUE, main = bquote(f(x)==3*x^2)) #density histogram of sample
y <- seq(0, 1, .01)
lines(y, 3*y^2)    #density curve f(x)
gibbs<-function(N=50000,thin=1000)
{
mat=matrix(0,ncol=2,nrow=N)
x=0
y=0
for (i in 1:N) {
for (j in 1:thin) {
x=rgamma(1,3,y*y+4)
y=rnorm(1,1/(x+1),1/sqrt(2*x+2))
}
mat[i,]=c(x,y)
}
names(mat)=c("x","y")
mat
}
gibbs
gibbs()
gibbs<-function(N=500,thin=10)
{
mat=matrix(0,ncol=2,nrow=N)
x=0
y=0
for (i in 1:N) {
for (j in 1:thin) {
x=rgamma(1,3,y*y+4)
y=rnorm(1,1/(x+1),1/sqrt(2*x+2))
}
mat[i,]=c(x,y)
}
names(mat)=c("x","y")
mat
}
gibbs()
gibbs<-function(N=500,thin=10)
{
mat=matrix(0,ncol=2,nrow=N)
x=0
y=0
for (i in 1:N) {
for (j in 1:thin) {
x=rgamma(1,3,y*y+4)
y=rnorm(1,1/(x+1),1/sqrt(2*x+2))
}
mat[i,]=c(x,y)
}
names(mat)=c("x","y")
mat
}
gibbs1<-function (n, rho)
{
mat <- matrix(ncol = 2, nrow = n)
x <- 0
y <- 0
mat[1, ] <- c(x, y)
for (i in 2:n) {
x <- rnorm(1, rho * y, sqrt(1 - rho^2))
y <- rnorm(1, rho * x, sqrt(1 - rho^2))
mat[i, ] <- c(x, y)
}
mat
}
bvn<-gibbs1(1000,0.98)
par(mfrow=c(3,2))
plot(bvn,col=1:10000)
plot(bvn,type="l")
plot(ts(bvn[,1]))
plot(ts(bvn[,2]))
hist(bvn[,1],40)
hist(bvn[,2],40)
par(mfrow=c(1,1))
#Simple gibbs sampler taken from http://www.mas.ncl.ac.uk
gibbs1<-function (n, rho)
{
mat <- matrix(ncol = 2, nrow = n)
x <- 0
y <- 0
mat[1, ] <- c(x, y)
for (i in 2:n) {
x <- rnorm(1, rho * y, sqrt(1 - rho^2))
y <- rnorm(1, rho * x, sqrt(1 - rho^2))
mat[i, ] <- c(x, y)
}
mat
}
bvn<-gibbs1(1000,0.98)
par(mfrow=c(3,2))
plot(bvn,col=1:10000)
plot(bvn,type="l")
plot(ts(bvn[,1]))
plot(ts(bvn[,2]))
hist(bvn[,1],40)
hist(bvn[,2],40)
data <- read.csv(file="C:\tools\javamop3.0\vv\HashSetAddData.csv",head=FALSE,sep=",")
data
data <- read.csv(file="C:\tools\javamop3.0\vv\HashSetAddData.csv",head=FALSE,sep=",")
data <- read.csv(file="C:/tools/javamop3.0/vv/HashSetAddData.csv",head=FALSE,sep=",")
data
plot(data)
str(data)
cleandata <- subset(data, select=c(v1))
cleandata <- subset(data, select=c("V1"))
cleandata
cleandata <- subset(data, select=c("V2"))
cleandata
plot(cleandata)
str(data)
summary(cleandata)
sd(cleandata)
summary(cleandata$V1)
sd(cleandata$V1)
sd(data$V2)
summary(data$V2)
plot(cleandata)
hist(cleandata)
data <- read.csv(file="C:/tools/javamop3.0/vv/HashSetAddData-BadHashing.csv",head=FALSE,sep=",")
sd(data$V2)
summary(data$V2)
cleandata <- subset(data, select=c("V2"))
plot(cleandata)
str(data)
str(cleandata)
cleandata[0]
cleandata$V1 <- subset(data1, select=c("V2"))
data1 <- read.csv(file="C:/tools/javamop3.0/vv/HashSetAddData.csv",head=FALSE,sep=",")
data2 <- read.csv(file="C:/tools/javamop3.0/vv/HashSetAddData-BadHashing.csv",head=FALSE,sep=",")
cleandata$V1 <- subset(data1, select=c("V2"))
cleandata$V2 <- subset(data2, select=c("V2"))
str(cleandata)
plot(cleandata)
cleandata
ggplot(cleandata)
ggplot2(cleandata)
cleandata <- rbind(subset(data1, select=c("V2")),subset(data2, select=c("V2")))
str(cleandata)
plot(cleandata)
plot(data1)
plot(data1$V1,data1$V2)
plot(data1$V2,data1$V1)
plot(data2$V2,data2$V1)
data2 <- read.csv(file="C:/tools/javamop3.0/vv/HashSetAddData-BadHashing.csv",head=FALSE,sep=",")
plot(data2$V2,data2$V1)
summary(data2$V2)
sd(data2$V2)
plotgraph <- function(filepath) {
data <- read.csv(file=filepath,head=FALSE,sep=",")
plot(data$V2,data$V1)
}
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random1.csv")
par(mfrow=c(3,2))
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random1.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random2.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random3.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed1.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed2.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed3.csv")
plotgraph <- function(filepath) {
data <- read.csv(file=filepath,head=FALSE,sep=",")
plot(data$V2,data$V1,main=filepath)
}
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random1.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random2.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random3.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed1.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed2.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed3.csv")
par(mfrow=c(2,3))
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random1.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random2.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random3.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed1.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed2.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed3.csv")
par(mfrow=c(1,3))
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random1.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random2.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random3.csv")
plotgraph <- function(filepath) {
data <- read.csv(file=filepath,head=FALSE,sep=",")
plot(data$V2,data$V1,xlab="Time Taken", ylab="Iteration")
}
par(mfrow=c(1,3))
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random1.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random2.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random3.csv")
plotgraph <- function(filepath) {
data <- read.csv(file=filepath,head=FALSE,sep=",")
plot(data$V2,data$V1,xlab="Time Taken", ylab="Iteration", main="Plot")
}
par(mfrow=c(1,3))
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random1.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random2.csv")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random3.csv")
plotgraph <- function(filepath, title) {
data <- read.csv(file=filepath,head=FALSE,sep=",")
plot(data$V2,data$V1,xlab="Time Taken", ylab="Iteration", main=title)
}
par(mfrow=c(2,3))
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random1.csv", "Random")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random2.csv", "Random")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-Random3.csv", "Random")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed1.csv", "No Collision")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed2.csv", "No Collision")
plotgraph("C:/tools/javamop3.0/vv/HashSetAddData-WellDistributed3.csv", "No Collision")
library(gRain)
install.packages("gRain")
library(gRain)
(yn  <- c("yes","no"))
(d   <- cptable(~disease, values=c(1,999), levels=yn))
install.packages("gRbase")
library(gRain)
library(gRbase)
install.packages("RBGL")
library(gRbase)
install.packages("gRain")
install.packages("pcalg")
source("http://bioconductor.org/biocLite.R")
biocLite("RBGL")
library(gRain)
library(gRbase)
library(RBGL)
library(pcalg)
library(vcd)
(yn  <- c("yes","no"))
(d   <- cptable(~disease, values=c(1,999), levels=yn))
(t.d <- cptable(~test+disease, values=c(99,1,1,99), levels=yn))
plist <- compileCPT(list(d, t.d))
pn <- grain(plist)
plot(pn)
pnc <- compile(pn, propagate=TRUE)
pnc$cpt
querygrain(pnc, nodes=c("test", "disease"), type="conditional") #test|disease
querygrain(pnc, nodes=c("disease","test"), type="conditional")  #disease|test
(pnc.ev <- setEvidence(pnc, "test", "yes"))
querygrain(pnc.ev, nodes="disease")
?cptable
?compileCPT
?grain
?compile
?propagate
plot(pn)
plot(pn)
yn <- c("yes","no")
a <- cptable(~asia, values=c(1,99),levels=yn)
t.a <- cptable(~tub|asia, values=c(5,95,1,99),levels=yn)
s <- cptable(~smoke, values=c(5,5), levels=yn)
l.s <- cptable(~lung|smoke, values=c(1,9,1,99), levels=yn)
b.s <- cptable(~bronc|smoke, values=c(6,4,3,7), levels=yn)
e.lt <- cptable(~either|lung:tub,values=c(1,0,1,0,1,0,0,1),levels=yn)
x.e <- cptable(~xray|either, values=c(98,2,5,95), levels=yn)
d.be <- cptable(~dysp|bronc:either, values=c(9,1,7,3,8,2,1,9), levels=yn)
plist <- compileCPT(list(a, t.a, s, l.s, b.s, e.lt, x.e, d.be))
net1 <- grain(plist)
plot(net1)
net12 <- setEvidence(net1, nslist=list(asia="yes", dysp="yes"))
pEvidence( net12 )
(yn  <- c("yes","no"))
library(gRain)
install.packages("gRain")
install.packages("gRbase")
install.packages("RBGL")
install.packages("pcalg")
install.packages("pcalg")
install.packages("gRain")
source("http://bioconductor.org/biocLite.R")
biocLite("RBGL")
library(gRain)
library(gRbase)
library(RBGL)
library(pcalg)
library(vcd)
(yn  <- c("yes","no"))
(d   <- cptable(~disease, values=c(1,999), levels=yn))
(t.d <- cptable(~test+disease, values=c(99,1,1,99), levels=yn))
plist <- compileCPT(list(d, t.d))
pn <- grain(plist)
plot(pn)
R.version()
version
data = c(85, 74, 130, 20, 110, 105, 120, 80, 385, 166, 90, 84, 145, 98, 87, 40, 70, 58, 74, 25, 905, 75, 4, 128, 130, 60, 330, 10, 126, 50, 50, 35, 14, 70, 26, 85, 60, 100, 19, 235, 70, 55, 37, 979, 110, 2, 4)
hist(data)
hist(data, breaks=seq(0,1000,by=25))
hist(data, breaks=seq(0,200,by=25))
data1 = data[which(data<200)]
data1
hist(data1, breaks=seq(0,200,by=25))
data2 = data[which(data>150)]
data2
hist(data1, breaks=seq(0,250,by=25))
data1 = data[which(data<250)]
data2 = data[which(data>150)]
hist(data1, breaks=seq(0,250,by=25))
data1 = data[which(data<150)]
data2 = data[which(data>150)]
hist(data1, breaks=seq(0,150,by=25))
mydata <- read.csv(file="loop-coocAnalysis.txt", header=F, row.names=1, sep="\t")
setwd("C:/Users/Venkatesh/git/in.ac.iiitd.pag.anne/")
mydata <- read.csv(file="loop-coocAnalysis.txt", header=F, row.names=1, sep="\t")
#transposes it and makes a matrix
mydata_t <- t(as.matrix(mydata))
#makes Spearman's correlation
cor.matrix <- cor(mydata_t, method = "spearman")
#remove upper part of the matrix, since it gives the same informations
cor.matrix[upper.tri(cor.matrix )] <- NA
#checks matrix dimensions
dim(cor.matrix)
#Finally, I plotted a triangular heatmap of my matrix
##the standard function will put the y labels on the right!! I wanted them on the         left! So ##changed the heatmap.2 function code in this way:
####open the code:
fix(heatmap.2)
cex.axis = cexRow) "
heatmap<-      heatmap.2(cor.matrix,scale="none",Rowv=NA,Colv=NA,col=rainbow,margins(5,5),cexRow=0.5,cexCol=1.0,key=TRUE,keysize=1.5,trace="none")
cor.matrix
require(gplots)  # for heatmap.2()
setwd("C:/Users/Venkatesh/git/in.ac.iiitd.pag.anne/")
mydata <- read.csv(file="loop-coocAnalysis.txt", header=F, row.names=1, sep="\t")
mydata_t
setwd("C:/Users/Venkatesh/git/in.ac.iiitd.pag.anne/")
mydata <- read.csv(file="loop-coocAnalysis.txt", header=F, row.names=1, sep="\t")
mydata_t <- t(as.matrix(mydata))
s <- svd(mydata_t)
mydata <- read.csv(file="loop-coocAnalysis.txt", header=F, row.names=1, sep="\t")
#transposes it and makes a matrix
mydata <- read.csv(file="loop-coocAnalysis.txt", header=F, row.names=1, sep="\t")
mydata_t <- t(as.matrix(mydata))
s <- svd(mydata_t)
